error_log stderr;
daemon off;
pid nginx_cache/nginx.pid;

worker_processes auto;

worker_rlimit_nofile 100000;

events {
  worker_connections 100000;
  use epoll;
  multi_accept on;
}

http {
  client_body_temp_path nginx_cache/tmp_uploads;
  proxy_temp_path nginx_cache/tmp_proxy;

  index noindex.html;

  js_path "nginx_scripts";
  js_import main from main.js;
  js_var $upstream_connect_time_js $upstream_connect_time;
  js_set $upstream_connect_time_ms main.upstreamconnecttimecalc;
  js_var $upstream_header_time_js $upstream_header_time;
  js_set $upstream_header_time_ms main.upstreamheadertimecalc;
  js_var $request_time_js $request_time;
  js_set $request_time_ms main.requesttimecalc;

  reset_timedout_connection on;

  proxy_cache_path nginx_cache/main_cache levels=2:2 keys_zone=main_cache:1024m max_size=100g inactive=10d use_temp_path=off;

  # Based on mozillas ssl configs, with a larger session cache and ssl_early_data
  ssl_certificate certs/fullchain.pem;
  ssl_certificate_key certs/key.pem;
  ssl_session_timeout 30d;
  ssl_session_cache shared:MozSSL:1024m;
  ssl_session_tickets on;
  ssl_trusted_certificate certs/cert.pem;
  ssl_stapling on;
  ssl_stapling_file certs/ocsp.resp;
  ssl_early_data on;
  resolver 127.0.0.53 8.8.4.4 8.8.8.8 1.1.1.1 1.0.0.1;
  ssl_dhparam certs/dhparam;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off; # This is sometimes reccomended against because of downgrade attacks, but if we only have modern ciphers enabled this will allow the client to pick the most efficent cipher for them without much danger.
  more_set_headers "Strict-Transport-Security: max-age=63072000";

  client_body_timeout 15;
  client_header_timeout 15;
  keepalive_timeout 15;
  send_timeout 15;

  keepalive_requests 400;

  server_names_hash_bucket_size 256;
  variables_hash_bucket_size 256;
  
  open_file_cache max=200000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_errors on;

  sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	types_hash_max_size 2048;
	server_tokens off;
  charset UTF-8;

 	more_clear_headers Server;

  access_log syslog:server=unix:/dev/log;

  types {
    text/html                             html;
    text/css                              css;
    image/jpeg                            jpeg jpg;
    application/javascript                js mjs;
    application/rss+xml                   rss;
    image/png                             png;
    image/svg+xml                         svg svgz;
    font/woff                             woff;
    font/woff2                            woff2;
    audio/mpeg                            mp3;
    video/mp4                             mp4;
    video/webm                            webm;
    application/json                      json;
    application/importmap+json            importmap;
    application/gzip                      gz;
  }

  server {
    listen 80 default_server;
    listen [::]:80 default_server;

    location / {
      return 301 https://$host$request_uri;
    }
  }

  upstream postgrest {
    keepalive 10;
    zone upstream_postgrest 64k;
    # Don't allow more connections to postgrest than it has db-pool connections for
    server 127.0.0.1:3000 max_conns=500;
  }

  upstream ssr {
    keepalive 10;
    zone upstream_ssr 64k;
    server 127.0.0.1:8080;
  }

  upstream notify {
    keepalive 10;
    zone upstream_notify 64k;
    server 127.0.0.1:8085;
  }

  # This is the application layer nginx config that contains routing etc.
  upstream nginx_app {
    server 127.0.0.1:4200;
  }

  map $http_accept_encoding $normalized_accept_encoding {
      default "";
      "~*br*" "br";
      "~*gzip*" "gzip";
  }

  # Swagger API docs. It is on a separate subdomain so the laxer CSP does not have access to cookies
  server {
    listen 0.0.0.0:443 ssl http2;
    listen [::]:443 ssl http2;
    listen 0.0.0.0:443 http3;
    listen [::]:443 http3;
    server_name apidocs.*;

    index index.dist.html;

    location / {
      more_clear_headers 'Content-Security-Policy';
      more_set_headers "Content-Security-Policy: default-src 'self' 'unsafe-inline' blob:; worker-src ; style-src 'self' 'unsafe-inline'; img-src 'self' data:;";
      root apidocs/;
    }

    location /api/ {
      rewrite /api/(.*) /$1 break;
      proxy_pass http://postgrest;
    }
  }

  # This server block represents the public interface. it sets security-related settings, caches pre-compressed responses and handles normalization of headers
  server {
    listen 0.0.0.0:443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    listen 0.0.0.0:443 http3 default_server;
    listen [::]:443 http3 default_server;

    client_body_buffer_size        128K;
    client_header_buffer_size      8k;

    etag off;

    # HTTPS headers
    more_set_headers "Expect-CT: enforce, max-age=31536000";
    more_set_headers "Strict-Transport-Security: max-age=63072000";

    # Security headers
    more_set_headers "X-Frame-Options: SAMEORIGIN";
    more_set_headers "X-XSS-Protection: 1; mode=block";
    more_set_headers "X-Content-Type-Options: nosniff";
    more_set_headers "Referrer-Policy: no-referrer";
    more_set_headers "Cross-Origin-Embedder-Policy: require-corp";
    more_set_headers "Cross-Origin-Opener-Policy: same-origin";
    more_set_headers "Cross-Origin-Resource-Policy: same-origin";
    more_set_headers "Content-Security-Policy: default-src 'self'; base-uri 'none'; font-src 'self' data: blob:; script-src 'self' blob: '$upstream_http_x_nonce'; worker-src 'self' blob:; child-src blob: ; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:;";
    more_set_headers "Permissions-Policy: accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), display-capture=(), document-domain=(), encrypted-media=(), geolocation=(), gyroscope=(), layout-animations=(), magnetometer=(), microphone=(), midi=(), sync-xhr=(), usb=()";

    # Debugging/info headers
    more_set_headers "X-0RTT: false";
    more_set_headers "X-Cache-Status: $upstream_cache_status";
    more_set_headers "X-Cache-Date: $upstream_http_date";

    # Advertise that HTTP/3 is available
    more_set_headers 'Alt-Svc: h3=":443";ma=86400,h3-29=":443";ma=86400,h3-27=":443";ma=86400';

    location / {
      # If we are doing TLS 1.3 0-RTT and the request is not a GET return 425.
      # This is a bit hacky because Nginx does not support AND in IF and does not support nesting IF.
      set $UD "";
      if ($ssl_early_data) {
        more_clear_headers 'X-0RTT';
        more_set_headers "X-0RTT: true";
        set $UD T;
      }
      if ($request_method != 'GET') {
        set $UD "${UD}G";
      }
      if ($UD = 'TG') {
        return 425;
      }

      # Normalize authentication
      set $auth '';
      if ($cookie_token) {
          set $auth "Bearer ${cookie_token}";
      }
      if ($http_x_token) {
          set $auth "Bearer ${http_x_token}";
      }
      proxy_set_header Authorization $auth;

      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;

      # TODO: Only make some of the auth:ed requests bypass cache, SSR and static resources are always unauthenticated
      proxy_cache_bypass $auth;

      # Remove the custom nonce header
      proxy_hide_header "x-nonce";

      # Expires is just for internal cache use
      proxy_hide_header "expires";

      proxy_cache main_cache;
      # Default to a locking microcache
      proxy_cache_valid 200 1s;
      proxy_cache_methods GET HEAD;
      # Some API calls (like low zoom level vector map tiles) can take a long time to make
      proxy_cache_lock_age 10m;
      proxy_cache_lock_timeout 10m;
      proxy_read_timeout 10m;
      proxy_connect_timeout 10m;
      proxy_send_timeout 10m;
      send_timeout 10m;
      # Allow purging the cache from localhost
      proxy_cache_purge PURGE from 127.0.0.1 ::1;
      # TODO: maybe add "updating" here to allow for stale caches
      proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
      proxy_cache_background_update on;
      proxy_cache_key $normalized_accept_encoding$uri$is_args$args;
      proxy_cache_lock on;
      proxy_ignore_client_abort on;
      proxy_set_header Accept-Encoding $normalized_accept_encoding;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_pass http://nginx_app;
    }

    # On SSE failure send a retry ping
    location @notify-retry {
      more_set_headers "Content-type: text/event-stream";
      return 500 "
event: ping
retry: 10000
";
    }

    location /notify/ {
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
      error_page 502 =500 @notify-retry;
      rewrite /notify/(.*) /$1 break;
      proxy_pass http://notify;
    }

    location /uploads/ {
      internal;
      alias uploads/;
    }

    location ~ /file/(.*) {
      proxy_pass http://postgrest/rpc/validate_file_download?f=$1;
      # TODO: This needs to be secured against js/css/svg/html etc mime-types. Maybe use a subdomain that has a CSP that disallows all exec?
    }

    # Allow signout without hitting postgrest. This is because if the JWT in the cookie is invalid the client has no way to unset it and postgrest will return 403, thus this is the only way to sign out with an invalid JWT.
    location /api/rpc/signout {
      more_set_headers "set-cookie: token=deleted; Path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure; SameSite=Strict";
      return 200;
    }
  }

  server {
    listen 127.0.0.1:4200 default_server;

    # Debugging/info headers
    more_set_headers "Server-Timing: upstream_connect_time;dur=$upstream_connect_time_ms, upstream_header_time;dur=$upstream_header_time_ms, request_time;dur=$request_time_ms";

    # Compression:
    gzip on;
    gzip_comp_level 9;
    gzip_types text/css text/csv application/x-protobuf application/javascript application/json image/svg+xml application/importmap+json;

    # Brotli takes a lot of resources, so don't max it out fully
    brotli on;
    brotli_comp_level 7;
    brotli_window 16m;
    brotli_types text/css text/csv application/x-protobuf application/javascript application/json image/svg+xml application/importmap+json;

    location /upload_file {
      limit_except POST              { deny all; }
      client_body_in_file_only       on;
      client_max_body_size           50G;
      proxy_pass_request_headers     on;
      proxy_set_header content-type "application/json";
      proxy_set_header               x-file-destination $request_body_file;
      proxy_set_header               x-file-content-type $http_content_type;
      proxy_set_header               x-file-name $http_x_name;
      proxy_set_body                 "{}";
      proxy_http_version             1.1;
      proxy_set_header Connection    "";
      proxy_pass                     http://postgrest/rpc/handle_upload;
      proxy_redirect                 off;
      js_header_filter               main.moveupload;
    }

    location /api/ {
      rewrite /api/(.*) /$1 break;
      proxy_pass http://postgrest;
      # TODO: Add vary header
      # expires 1s;
    }

    location @ssr {
      # Make Deno skip compression, we do that in the downstream nginx config
      proxy_set_header accept-encoding '';
      proxy_hide_header "vary";
      proxy_pass http://ssr;
      expires 1d;
    }

    location / {
      etag off;
      try_files $uri @ssr;
    }

    root frontend/;
    error_page 404 403 500 502 503 /index-error.dist.html;
    location ~* ^/CACHE[^/]+/(.*)$ {
      etag off;
      expires max;
      alias frontend/$1;
    }
  }
}
